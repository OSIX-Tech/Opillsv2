---
// This frontmatter is intentionally left empty.
import BrainIcon from '../components/BrainIcon.astro';
import BuildingIcon from '../components/BuildingIcon.astro';
---

<section id="features" class="py-20 px-6 sm:px-8 md:px-12 font-sans">
  <div class="w-full max-w-7xl mx-auto">
    <!-- Grid responsivo: la altura se calculará automáticamente -->
    <div id="bento-grid" class="grid grid-cols-1 md:grid-cols-3 gap-6">
      
      <!-- Columna Izquierda (1 caja alta) -->
      <div class="bento-box md:row-span-3 bg-teal-100 p-6 rounded-3xl shadow-lg min-h-[200px]"></div>

      <!-- Fila Superior, Col 2-3 (1 caja ancha) -->
      <div class="bento-box md:col-span-2 bg-teal-100 p-6 rounded-3xl shadow-lg min-h-[200px]"></div>
      
      <!-- Columna Central, Fila 2-3 (1 caja vertical) -->
      <div class="bento-box md:row-span-2 bg-teal-100 p-6 rounded-3xl shadow-lg min-h-[200px]"></div>
      
      <!-- Celdas restantes en la columna derecha -->
      <div class="bento-box bg-teal-100 p-6 rounded-3xl shadow-lg min-h-[200px]"></div>
      <div class="bento-box bg-teal-100 p-6 rounded-3xl shadow-lg min-h-[200px]"></div>

    </div>
  </div>
</section>

<style>
  .bento-box {
    opacity: 0;
    transform: translateY(30px) scale(0.98);
    transition: opacity 0.6s ease-out, transform 0.6s ease-out;
    transition-delay: var(--delay, 0ms);
  }

  .bento-box.is-visible {
    opacity: 1;
    transform: translateY(0) scale(1);
  }
</style>

<script>
  // Script para animar las cajas al hacer scroll
  const boxes = document.querySelectorAll('.bento-box');
  
  if (boxes.length > 0) {
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('is-visible');
          observer.unobserve(entry.target);
        }
      });
    }, {
      threshold: 0.6 // Animación inicia cuando el 20% es visible (más flexible)
    });

    boxes.forEach((box, index) => {
        const el = box as HTMLElement;
        // Asigna un retardo escalonado a cada caja
        el.style.setProperty('--delay', `${index * 80}ms`); // Delay más rápido para 9 cajas
        observer.observe(el);
    });
  }
</script>
